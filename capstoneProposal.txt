Taryn Ries 


Evolution Meal Planning 


1. Tech Stack 
For Evolution Meal Planning, the tech stack will include React for the front end, 
Node for the back end, and PostgreSQL for the database. 
The application will be deployed on Heroku. 

2. Project Focus
The project will be a full-stack application with greater emphasis on the front-end UI. 

3. Platform
Evolution Meal Planning will be a responsive web application that is accessible 
on desktop devices. 

4. Project Goal 
The primary goal of this website is to create a web application that allows users to 
experience greater ease and enjoyment with meal planning. 
To be able to select from recipes based on preference, generate shopping lists based on these recipes, 
add additional items to these lists and check things off as they go. 

5. Users
The target demographic for Evolution Meal Planning includes a wide range of users 
including anyone that grocery shops and cooks meals at home who are 
looking to create ease in this process. 

6. Data and API
I plan on using Spoonacular API to implement recipe, ingredient, meal category and shopping list data. 

7. Project Approach
   1. Database Schema: 
      1. User Table:
         1. user_id (Primary Key)
         2. username
         3. password
         4. email
      2. Recipe Table:
         1. recipe_id (Primary Key)
         2. title
         3. description
         4. meal_category_id (Foreign Key referencing Meal Category Table)
      3. Meal Category Table:
         1. meal_category_id (Primary Key)
         2. name
      4. Ingredient Table:
         1. ingredient_id (Primary Key)
         2. name
         3. description
      5. Recipe-Ingredient Mapping Table:
         1. recipe_id (Foreign Key referencing Recipe Table)
         2. ingredient_id (Foreign Key referencing Ingredient Table)
         3. quantity (e.g., 2 cups, 3 teaspoons, etc.)
      6. Shopping List Table:
         1. list_id (Primary Key)
         2. user_id (Foreign Key referencing User Table)
         3. name
      7. Shopping List Item Table:
         1. item_id (Primary Key)
         2. list_id (Foreign Key referencing Shopping List Table)
         3. ingredient_id (Foreign Key referencing Ingredient Table)
         4. quantity (e.g., 2 cups, 3 teaspoons, etc.)
         5. checked (boolean indicating whether the item has been checked off)

   2. API Issues: 
Potential API issues include request limits, data accuracy and availability, 
and reliability in the case of any downtime on the API website. 


   3. Sensitive information: 
The user's login information should be kept secure.


   4. Functionality: 
Core features include user user registration and authentication,
recipe browsing and selection, meal category filtering, shopping list generation, 
custom ingredient addition, and shopping list management. 


   5. User flow: 
Users will create an account or login using their credentials. Users will then browse 
through a collection of recipes and add to their meal plan or shopping list. 
Based on the selected recipes users can generate shopping lists with required ingredients. 
Users can then add additional items to their shopping lists and then ultimately view, modify and check off items on their lists.


   6. Stretch goals: 
Stretch goals for if time allows could include recipe reviews and ratings, 
meal planner to plan recipes and lists for certain dates, 
or favorites and saved recipes which would allow users to save their favorite recipes for easy future access.